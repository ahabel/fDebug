<?xml version="1.0"?>
<!DOCTYPE bindings [
<!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
%globalDTD;
]>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
   
  <!-- cmsbrowser xbl - inspired by the mozilla tabbrowser control (see toolkit.jar / browser.jar)  -->
  <binding id="cmsbrowser">

    <resources>
      <stylesheet src="chrome://fdebug/content/xbl/cmsbrowser.css"/>
    </resources>
          
    <content>
      <xul:tabbox flex="1">
         <xul:tabs setfocus="false" closebutton="false" onclosetab="document.getBindingParent(this).onCloseTab();"
                   xbl:inherits="handleCtrlPageUpDown,onnewtab">
            <xul:tab selected="true" label="" xbl:inherits="label=title" maxwidth="250" width="0" 
                     minwidth="30" flex="100" />
         </xul:tabs>
         <xul:tabpanels flex="1" selectedIndex="0" onfocus="return false;" xbl:inherits="onfocus">
            <xul:iframe src="about:blank" xbl:inherits="src" />
         </xul:tabpanels>         
      </xul:tabbox>       
      <children/>
    </content>     
     
    <implementation>       
      <!-- shortcut vars -->      
      <field name="cmsTabbox" />    
      <field name="panelContainer" /> 
      <field name="tabContainer" />  
      
      <field name="tablist" />   

      <property name="selectedTab">
        <getter>
          return this.cmsTabbox.selectedTab;
        </getter>
        <setter>
          <![CDATA[
          // Update the tab
          this.cmsTabbox.selectedTab = val;
          return val;
          ]]>
        </setter>
      </property>   
      
      <method name="_onload">
        <body>
        <![CDATA[
            var event = document.createEvent("Events");            
            event.browser=this;
            event.initEvent("load", false, true);
            document.getBindingParent(this).dispatchEvent(event);          
        ]]>
        </body>
      </method>
      
      <method name="getBrowserForEvent">
        <parameter name="event" />
        <body>
        <![CDATA[
           return event.browser;           
        ]]>
        </body>
      </method>

      <method name="addTab">
        <parameter name="sURI"/>
	     <parameter name="sLabel"/>
        <parameter name="unique" />
        <parameter name="payload" />
        <body>
          <![CDATA[
             
            if (unique) {             
              for (var i in this.tablist) {
                if (this.tablist[i]['URI']==sURI) {
             		 this.selectedTab=this.tablist[i]['TAB'];
		             return this.tablist[i]['TAB'];
                }
              }                          
            }

            var iframe = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "iframe");                                     
            iframe.addEventListener('load', this._onload, true);
            this.cmsTabbox.getElementsByTagNameNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",'tabpanels')[0].appendChild(iframe);             

            var tab = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","tab");
            if (sLabel) {
               tab.setAttribute("label", sLabel);
            }

            tab.setAttribute("crop", "end");
            tab.maxWidth = 250;
            tab.minWidth = 30;
            tab.width = 0;
            tab.setAttribute("flex", "100");
            tab.setAttribute("class","cmstab");
            tab.cmsbrowser=this;
            
            this.cmsTabbox.getElementsByTagNameNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",'tabs')[0].appendChild(tab);
             
            this.tablist.push({ TAB:tab, URI:sURI, FRAME:iframe, PAYLOAD:payload });

            iframe.setAttribute('src',sURI);
            
            return tab;
          ]]>
        </body>
      </method>

       <method name="onCloseTab">
          <body>
             <![CDATA[
                return this.removeTab(this.cmsTabbox.selectedTab);
             ]]>
          </body>
       </method>
       
       <method name="reset">
         <body>
            <![CDATA[
          
              while (this.tabContainer.childNodes.length>1) {
	             this.removeTab(this.tabContainer.childNodes[1]);
   	        }
               
      	     this.replaceCurrent(this.getAttribute('src'),this.getAttribute('title'));
                         
          ]]>
         </body>       
	   </method>

      <method name="removeTab">
        <parameter name="aTab"/>
        <body>
          <![CDATA[
             
            if (aTab.localName != "tab") {
              aTab = this.cmsTabbox.selectedTab;
            }
                         
            var ds = this.getBrowserForTab(aTab).docShell;

            if (ds.contentViewer && !ds.contentViewer.permitUnload())
              return;
             
            var index = -1;
            if (this.cmsTabbox.selectedTab == aTab)
              index = this.cmsTabbox.selectedIndex;
            else {
              // Find and locate the tab in our list.
              for (var i = 0; i < this.tabContainer.childNodes.length; i++)
                if (this.tabContainer.childNodes[i] == aTab)
                  index = i;
            }

            var oldBrowser = this.panelContainer.childNodes[index];
             
            //var oURI=oldBrowser.getAttribute('src');                         
            for (var i in this.tablist) {
               if (this.tablist[i]['TAB']==aTab) {
		            this.tablist[i]['URI']=null;
		            this.tablist[i]['TAB']=null;
               	break;
               }
            }                                                  
            

            var currentIndex = this.cmsTabbox.selectedIndex;
             
            var newIndex = -1;
            if (currentIndex > index)
              newIndex = currentIndex-1;
            else if (currentIndex < index)
              newIndex = currentIndex;
            else if (index == this.tabContainer.childNodes.length - 1)
              newIndex = index-1;
            else
              newIndex = index;

            var oldTab = aTab;

            //oldTab.selected = false;

            this.tabContainer.removeChild(oldTab);
            this.panelContainer.removeChild(oldBrowser);

            this.tabContainer.selectedIndex = newIndex;
            this.panelContainer.selectedIndex = newIndex;
             
          ]]>
        </body>
      </method>
       
      <method name="setTabTitle">
	     <parameter name="sLabel"/>
	     <parameter name="aTab" />
        <body>
           <![CDATA[           
           if (!aTab) {
              aTab=this.cmsTabbox.selectedTab;
           }
           aTab.setAttribute('label',sLabel);
           ]]>
        </body> 
      </method>
       
      <method name="replaceCurrent">
        <parameter name="sURI"/>
	     <parameter name="sLabel"/>
        <parameter name="payload" />
         <body>
         <![CDATA[            
            var oURI=this.panelContainer.childNodes[this.cmsTabbox.selectedIndex].getAttribute('src');                         
            for (var i in this.tablist) {
               if (this.tablist[i]['URI']==oURI) {
		            this.tablist[i]['URI']=sURI;
                  this.tablist[i]['PAYLOAD']=payload;
                  	break;
               }
            }   
                                                           
				this.panelContainer.childNodes[this.cmsTabbox.selectedIndex].setAttribute('src',sURI);
				if (sLabel) {
               this.setTabTitle(sLabel);
				}
				return true;            
         ]]>   
         </body>         
      </method>
       
      <method name="getBrowserForTab">
        <parameter name="aTab"/>
        <body>
        <![CDATA[
           // dump('getBrowserForTab: '+aTab.nodeName+'\n');
           if (aTab==null) return this.getCurrentBrowser();
           for (var x=0; x<this.tablist.length; x++) {
              if (this.tablist[x].TAB==aTab) {
                 // dump('getBrowserForTab: '+this.tablist[x].FRAME.nodeName+'\n');
                 return this.tablist[x].FRAME;
              }
           }
           // dump('getBrowserForTab: NULL!!!\n');
           return null;
        ]]>
        </body>
      </method>
      
      <method name="getTabForBrowser">
        <parameter name="aBrowser"/>
        <body>
        <![CDATA[
           for (var x=0; x<this.tablist.length; x++) {
              if (this.tablist[x].FRAME.isSameNode(aBrowser)) {
                 return this.tablist[x].TAB;
              }
           }
           return null;
        ]]>
        </body>
      </method>
      
      <method name="getPayloadForBrowser">
        <parameter name="aBrowser"/>
        <body>
        <![CDATA[
           for (var x=0; x<this.tablist.length; x++) {
              if (this.tablist[x].FRAME.isSameNode(aBrowser)) {
                 return this.tablist[x].PAYLOAD;
              }
           }
           return null;
        ]]>
        </body>
      </method>

      <method name="getPayloadForTab">
        <parameter name="aTab"/>
        <body>
        <![CDATA[
           // dump('getBrowserForTab: '+aTab.nodeName+'\n');
           if (aTab==null) return this.getCurrentBrowser();
           for (var x=0; x<this.tablist.length; x++) {
              if (this.tablist[x].TAB.isSameNode(aTab)) {
                 // dump('getBrowserForTab: '+this.tablist[x].FRAME.nodeName+'\n');
                 return this.tablist[x].PAYLOAD;
              }
           }
           // dump('getBrowserForTab: NULL!!!\n');
           return null;
        ]]>
        </body>
      </method>
      
       <method name="getCurrentBrowser">
         <body><![CDATA[ 
           return this.panelContainer.childNodes[this.cmsTabbox.selectedIndex];
         ]]></body>
       </method>
       
       <method name="onSelect">
          <body><![CDATA[
			  if (this.cmsTabbox.selectedIndex==0) {
             this.tabContainer.setAttribute('disableclose','true');
           } else {
             this.tabContainer.removeAttribute('disableclose');
           }
          ]]></body>
       </method>
       
      
      <constructor>
        <![CDATA[
          
          this.cmsTabbox         = document.getAnonymousNodes(this)[0];
          this.tabContainer      = this.cmsTabbox.childNodes[0];
          this.panelContainer    = this.cmsTabbox.childNodes[1];
          this.cmsCurrentBrowser = this.panelContainer.firstChild;
          this.cmsCurrentTab     = this.tabContainer.firstChild;

          this.tablist = new Array();
           
          var iframe=this.getCurrentBrowser();
          iframe.addEventListener('load', this._onload, true);
          
          this.tablist.push({ 
               TAB:this.cmsCurrentTab, 
               URI:iframe.getAttribute('src'), 
               FRAME:iframe,
               PAYLOAD:null
               });          
          
        ]]>
      </constructor>
       
    </implementation>

    <handlers>
	    <handler event="select" action="this.onSelect();"/>     
    </handlers>

  </binding>
  
  <binding id="cmsbrowser-tab" display="xul:hbox"
           extends="chrome://global/content/bindings/tabbox.xml#tab">
   
   <content chromedir="&locale.dir;">
      <xul:label value="" xbl:inherits="value=label" flex="1" />
      <xul:toolbarbutton flex="0" oncommand="var x=document.getBindingParent(this); x.cmsbrowser.removeTab(x);" />
   </content>
   
   <handlers>
      <handler event="load">
      <![CDATA[
          event.stopPropagation();
      ]]>
      </handler>
      
   </handlers>
   
  </binding>

</bindings>
